basePath: /api/v1
definitions:
  core.Expense:
    properties:
      amount:
        type: number
      category:
        type: string
      createdAt:
        type: string
      date:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      type:
        type: integer
    type: object
  core.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
  ports.AuthInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  ports.AuthOutput:
    properties:
      token:
        type: string
      userId:
        type: integer
      userName:
        type: string
    type: object
  ports.ExpenseInput:
    properties:
      amount:
        type: number
      category:
        type: string
      date:
        type: string
      description:
        type: string
      type:
        type: integer
    type: object
  ports.UserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:3008
info:
  contact:
    email: eduardo-paes@outlook.com
    name: Eduardo Paes
    url: https://twitter.com/edpaes
  description: API for managing expenses in CashFlow application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CashFlow API
  version: "1.0"
paths:
  /expense:
    get:
      consumes:
      - application/json
      description: Get one or multiple expenses based on provided parameters
      parameters:
      - description: Expense ID
        in: query
        name: id
        type: integer
      - description: Number of items to skip
        in: query
        name: skip
        type: integer
      - description: Number of items to take
        in: query
        name: take
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.Expense'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get one or multiple expenses
      tags:
      - expenses
    post:
      consumes:
      - application/json
      description: Create a new expense
      parameters:
      - description: Expense data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ports.ExpenseInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Expense'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new expense
      tags:
      - expenses
  /expense/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an expense by ID
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Expense'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete an expense by ID
      tags:
      - expenses
    put:
      consumes:
      - application/json
      description: Update an expense by ID
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      - description: Expense data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ports.ExpenseInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Expense'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update an expense by ID
      tags:
      - expenses
  /login:
    post:
      consumes:
      - application/json
      description: Login with user credentials
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ports.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ports.AuthOutput'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /swagger/{anything}:
    get:
      description: Swagger UI endpoint
      responses: {}
      summary: Swagger UI endpoint
  /user:
    get:
      consumes:
      - application/json
      description: Get one or multiple users based on provided parameters
      parameters:
      - description: User ID
        in: query
        name: id
        type: integer
      - description: Number of items to skip
        in: query
        name: skip
        type: integer
      - description: Number of items to take
        in: query
        name: take
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get one or multiple users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ports.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete an user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ports.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update an user by ID
      tags:
      - users
schemes:
- http
security:
- BasicAuth: []
- BearerToken: []
securityDefinitions:
  JWT:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
